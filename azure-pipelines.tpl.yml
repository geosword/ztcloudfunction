trigger:
- '*' # Run on any branch

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Link the variable group populated by setup-repo.sh
  # Ensure 'cloudfunction-variables' contains AZCF_NAME, resourceGroupName, baseName, location, azcfEnvSomevalue
  - group: cloudfunction-variables

  # Path to your function code - dynamically set based on AZCF_NAME
  # Make sure a folder with this name exists in your repo root
  - name: functionAppProjectPath
    value: '$(System.DefaultWorkingDirectory)/$(AZCF_NAME)'

stages:
- stage: Deploy
  jobs:
    - job: DeployInfrastructure
      steps:
      - task: AzureCLI@2
        displayName: 'Deploy/Update Azure Function Infrastructure'
        inputs:
          azureSubscription: '#AZURE_SERVICE_CONNECTION#' # Ensure this service connection is valid
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "Deploying infrastructure for baseName $(baseName) in $(location)..."
            # Deploy the Bicep template - This might configure the existing Function App or deploy supporting resources.
            # Ensure your Bicep template (infra/function.bicep) correctly uses the parameters.
            az deployment group create \
              --resource-group $(resourceGroupName) \
              --template-file $(System.DefaultWorkingDirectory)/infra/function.bicep \
              --parameters baseName=$(baseName) \
                           azcf_env_somevalue=$(azcfEnvSomevalue) \
                           functionAppName=$(AZCF_NAME) # Pass AZCF_NAME to Bicep if needed

            echo "Infrastructure deployment completed."
            # No need to extract functionAppName as output anymore

    - job: RunUnitTests
      dependsOn: DeployInfrastructure
      steps:
      - task: Bash@3
        displayName: 'Run Unit Tests'
        inputs:
          targetType: 'inline'
          script: |
            echo "Running unit tests..."
            pip install -r requirements.txt
            ./unittests.sh
            echo "Unit tests completed."

    - job: DeployFunctionCode
      dependsOn: RunUnitTests
      steps:
      - task: FuncToolsInstaller@0
        displayName: 'Install Azure Functions Core Tools'

      - task: AzureCLI@2
        displayName: 'Deploy Function App using Core Tools'
        inputs:
          azureSubscription: '#AZURE_SERVICE_CONNECTION#'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            set -e
            echo "Deploying Python Functions from $(functionAppProjectPath)â€¦"
            func azure functionapp publish $(AZCF_NAME)-func --build remote --python
